name: Build ESPHome Firmware

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write  # needed to push updated .buildcount file

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install ESPHome
        run: pip install esphome

      - name: Generate firmware version (persistent build counter)
        id: versioning
        run: |
          YEAR=$(date +'%Y')
          MONTH=$(date +'%m')
          BOARD="esp32"

          COUNTER_FILE=".buildcount"

          # Initialize file if missing
          if [ ! -f "$COUNTER_FILE" ]; then
            echo "${YEAR}.${MONTH}.0" > "$COUNTER_FILE"
          fi

          LAST_VERSION=$(cat "$COUNTER_FILE")

          LAST_YEAR=$(echo "$LAST_VERSION" | cut -d'.' -f1)
          LAST_MONTH=$(echo "$LAST_VERSION" | cut -d'.' -f2)
          LAST_BUILD=$(echo "$LAST_VERSION" | cut -d'.' -f3)

          if [ "$YEAR" = "$LAST_YEAR" ] && [ "$MONTH" = "$LAST_MONTH" ]; then
            BUILD_NUMBER=$((LAST_BUILD + 1))
          else
            BUILD_NUMBER=0
          fi

          # Update file
          echo "${YEAR}.${MONTH}.${BUILD_NUMBER}" > "$COUNTER_FILE"

          FIRMWARE_NAME="${YEAR}.${MONTH}.${BUILD_NUMBER}-${BOARD}"

          echo "FIRMWARE_NAME=${FIRMWARE_NAME}" >> $GITHUB_ENV
          echo "Firmware filename will be: ${FIRMWARE_NAME}.bin"

      - name: Build firmware
        run: |          
          # Auto-generate dummy secrets.yaml with required keys
          if grep -q "!secret" dehumidifier.yaml; then
            echo "Generating temporary secrets.yaml..."
            SECRET_KEYS=$(grep -oP '!secret\s+\K[\w_]+' dehumidifier.yaml | sort -u)
            echo "# Auto-generated dummy secrets for CI build" > secrets.yaml
            for key in $SECRET_KEYS; do
              echo "${key}: DUMMY_VALUE" >> secrets.yaml
            done
          else
            echo "# Dummy secrets for CI" > secrets.yaml
          fi

          # Extract ESPHome project name
          PROJECT_NAME=$(grep -E '^esphome:' -A2 dehumidifier.yaml | grep 'name:' | awk '{print $2}' | tr -d '\r')
          if [ -z "$PROJECT_NAME" ]; then
            echo "Could not detect project name; using default 'firmware'"
            PROJECT_NAME="firmware"
          fi
          echo "Detected ESPHome project name: $PROJECT_NAME"

          # Compile the firmware
          esphome compile dehumidifier.yaml

          # Copy the generated firmware if it exists
          FIRMWARE_PATH=".esphome/build/${PROJECT_NAME}/firmware.bin"
          mkdir -p firmware_output
          if [ -f "$FIRMWARE_PATH" ]; then
            cp "$FIRMWARE_PATH" "firmware_output/${FIRMWARE_NAME}.bin"
            echo "Firmware copied successfully to firmware_output/${FIRMWARE_NAME}.bin"
          else
            echo "‚ùå Firmware not found at $FIRMWARE_PATH"
            echo "Available files in .esphome/build/:"
            ls -R .esphome/build || true
            exit 1
          fi

      - name: Commit updated build count
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .buildcount
          git commit -m "chore: increment build number to ${{ env.FIRMWARE_NAME }}" || echo "No changes to commit"
          git push

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FIRMWARE_NAME }}
          path: firmware_output/${{ env.FIRMWARE_NAME }}.bin